generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  department     String?
  reputation     Int       @default(0)
  bio            String?   @db.Text
  role           String?
  
  questions       Question[]
  answers         Answer[]
  votes           Vote[]
  accounts        Account[]
  sessions        Session[]
  visibleAnswers  AnswerVisibility[] @relation("VisibleToUsers")
  teamsMembership TeamMember[]
  ownedTeams      Team[]           @relation("TeamOwner")
  articles        Article[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token        String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  department  String?      // Added department field
  
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  questions   Question[]
  answers     Answer[]
}

model TeamMember {
  id         String   @id @default(cuid())
  teamId     String
  userId     String
  role       String   @default("member") // member, admin
  joinedAt   DateTime @default(now())
  
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
}

model Question {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  views     Int      @default(0)
  teamId    String?  // null means public/company-wide
  
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  team      Team?    @relation(fields: [teamId], references: [id])
  answers   Answer[]
  votes     Vote[]
  tags      Tag[]
}

model Answer {
  id                  String            @id @default(cuid())
  body                String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  authorId            String
  questionId          String
  isAccepted          Boolean           @default(false)
  visibilityType      String            @default("public") // public, roles, departments, specific_users, team
  visibleToRoles      String[]          @default([])
  visibleToDepartments String[]         @default([])
  teamId              String?           // If part of a team discussion
  
  author              User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question            Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  team                Team?             @relation(fields: [teamId], references: [id])
  votes               Vote[]
  visibleToUsers      AnswerVisibility[]
}

model AnswerVisibility {
  id        String   @id @default(cuid())
  answerId  String
  userId    String
  
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user      User     @relation("VisibleToUsers", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([answerId, userId])
}

model Vote {
  id         String    @id @default(cuid())
  value      Int       // 1 for upvote, -1 for downvote
  userId     String
  questionId String?
  answerId   String?
  createdAt  DateTime  @default(now())
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, answerId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  excerpt     String?  @db.Text
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  tags        String[] @default([])
  readTime    Int?     // Estimated read time in minutes
  
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

